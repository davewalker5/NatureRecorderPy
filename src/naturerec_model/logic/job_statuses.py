"""
Background job status business logic
"""

import sqlalchemy as db
from sqlalchemy.exc import IntegrityError
from ..model import Session, JobStatus


def create_job_status(name, parameters, start, user):
    """
    Create a new background job status record

    :param name: Name of the job
    :param user: Current user
    :param parameters: Job parameters
    :param start: Start date for the job
    :return: JobStatus instance for the newly created record
    """
    try:
        with Session.begin() as session:
            job_status = JobStatus(name=name,
                                   parameters=parameters,
                                   start_date=start,
                                   created_by=user.id,
                                   updated_by=user.id)
            session.add(job_status)
    except IntegrityError as e:
        raise ValueError("Invalid job status properties") from e

    return job_status


def complete_job_status(job_status_id, end, error, user):
    """
    Mark the specified background job as completed

    :param job_status_id: Job status ID
    :param end: End date and time
    :param error: Error generated by the job or None
    :param user: Current user
    :return: Updated JobStatus instance
    """
    try:
        with Session.begin() as session:
            job_status = session.query(JobStatus).get(job_status_id)
            if job_status is None:
                raise ValueError("Job status record not found")

            job_status.end_date = end
            job_status.error = error
            job_status.updated_by = user.id
    except IntegrityError as e:
        raise ValueError("Invalid job status properties") from e

    return job_status


def list_job_status(name=None, from_date=None, to_date=None):
    """
    Return a collection of job statuses matching the specified criteria

    :param name: Job name
    :param from_date: Return dates starting on or after this date
    :param to_date: Return dates starting on or before this date
    :return: Collection of JobStatus instances
    """
    with Session.begin() as session:
        query = session.query(JobStatus)

        if name:
            query = query.filter(JobStatus.name == name)

        if from_date:
            from_date_string = from_date.strftime(JobStatus.DATE_FORMAT)
            query = query.filter(JobStatus.start >= from_date_string)

        if to_date:
            to_date_string = to_date.strftime(JobStatus.DATE_FORMAT)
            query = query.filter(JobStatus.start <= to_date_string)

        job_statuses = query.order_by(db.asc(JobStatus.start)).all()

    return job_statuses
